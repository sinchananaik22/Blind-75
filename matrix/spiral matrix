class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        res = []
        if not matrix:
            return res
        
        top, bottom = 0, len(matrix) - 1
        left, right = 0, len(matrix[0]) - 1
        
        while left <= right and top <= bottom:
            # Traverse from Left to Right
            for j in range(left, right + 1):
                res.append(matrix[top][j])
            top += 1

            # Traverse from Top to Bottom
            for i in range(top, bottom + 1):
                res.append(matrix[i][right])
            right -= 1

            # Traverse from Right to Left (if rows remain)
            if top <= bottom:
                for j in range(right, left - 1, -1):
                    res.append(matrix[bottom][j])
                bottom -= 1

            # Traverse from Bottom to Top (if columns remain)
            if left <= right:
                for i in range(bottom, top - 1, -1):
                    res.append(matrix[i][left])
                left += 1
        
        return res


✅ Complexity

Time: O(m × n) — every element visited once

Space: O(1) — output list excluded
