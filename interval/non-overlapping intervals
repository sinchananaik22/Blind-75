class Solution:
    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
        if not intervals:
            return 0

        # Step 1: Sort by end time
        intervals.sort(key=lambda x: x[1])

        # Step 2: Initialize
        count = 0
        prev_end = intervals[0][1]

        # Step 3: Iterate through intervals
        for start, end in intervals[1:]:
            if start < prev_end:  # Overlap → remove current interval
                count += 1
            else:
                prev_end = end  # Update the end boundary if no overlap

        return count


⏱️ Complexity

Time: O(n log n) → sorting dominates

Space: O(1) → constant extra space
