class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        rows, cols = len(board), len(board[0])

        def dfs(r, c, idx):
            # Base case: found the entire word
            if idx == len(word):
                return True

            # Out of bounds or mismatch
            if r < 0 or r >= rows or c < 0 or c >= cols or board[r][c] != word[idx]:
                return False

            # Mark cell as visited
            temp = board[r][c]
            board[r][c] = '#'

            # Explore neighbors (up, down, left, right)
            found = (
                dfs(r + 1, c, idx + 1) or
                dfs(r - 1, c, idx + 1) or
                dfs(r, c + 1, idx + 1) or
                dfs(r, c - 1, idx + 1)
            )

            # Backtrack (restore cell)
            board[r][c] = temp

            return found

        # Try starting DFS from each cell
        for i in range(rows):
            for j in range(cols):
                if board[i][j] == word[0] and dfs(i, j, 0):
                    return True

        return False
