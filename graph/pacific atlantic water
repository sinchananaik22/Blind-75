from typing import List

class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        if not heights or not heights[0]:
            return []

        rows, cols = len(heights), len(heights[0])
        pacific = [[False] * cols for _ in range(rows)]
        atlantic = [[False] * cols for _ in range(rows)]

        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]

        def dfs(r, c, visited):
            visited[r][c] = True
            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                if (
                    0 <= nr < rows and 0 <= nc < cols
                    and not visited[nr][nc]
                    and heights[nr][nc] >= heights[r][c]
                ):
                    dfs(nr, nc, visited)

        # Run DFS from Pacific Ocean borders
        for c in range(cols):
            dfs(0, c, pacific)       # Top row
            dfs(rows - 1, c, atlantic)  # Bottom row

        for r in range(rows):
            dfs(r, 0, pacific)       # Left column
            dfs(r, cols - 1, atlantic)  # Right column

        # Collect cells reachable by both oceans
        result = []
        for r in range(rows):
            for c in range(cols):
                if pacific[r][c] and atlantic[r][c]:
                    result.append([r, c])

        return result























from collections import deque
from typing import List

class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        if not heights:
            return []
        
        rows, cols = len(heights), len(heights[0])
        
        def bfs(starts):
            visited = [[False]*cols for _ in range(rows)]
            queue = deque(starts)
            for r, c in starts:
                visited[r][c] = True
            
            directions = [(1,0),(-1,0),(0,1),(0,-1)]
            while queue:
                r, c = queue.popleft()
                for dr, dc in directions:
                    nr, nc = r + dr, c + dc
                    if (
                        0 <= nr < rows and 0 <= nc < cols
                        and not visited[nr][nc]
                        and heights[nr][nc] >= heights[r][c]
                    ):
                        visited[nr][nc] = True
                        queue.append((nr, nc))
            return visited
        
        pacific_starts = [(0, c) for c in range(cols)] + [(r, 0) for r in range(rows)]
        atlantic_starts = [(rows-1, c) for c in range(cols)] + [(r, cols-1) for r in range(rows)]
        
        pacific = bfs(pacific_starts)
        atlantic = bfs(atlantic_starts)
        
        result = [[r, c] for r in range(rows) for c in range(cols) if pacific[r][c] and atlantic[r][c]]
        return result
