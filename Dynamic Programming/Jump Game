from typing import List

class Solution:
    def canJump(self, nums: List[int]) -> bool:
        n = len(nums)
        dp = [False] * n
        dp[-1] = True  # last index is always reachable from itself
        
        for i in range(n-2, -1, -1):
            furthest_jump = min(i + nums[i], n-1)
            for j in range(i+1, furthest_jump+1):
                if dp[j]:
                    dp[i] = True
                    break
                    
        return dp[0]



Time Complexity: O(nÂ²) in worst case (each index may check up to nums[i] jumps)

Space Complexity: O(n) for the DP array
